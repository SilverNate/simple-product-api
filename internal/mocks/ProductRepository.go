// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	product "simple-product-api/internal/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// FindProduct provides a mock function with given fields: ctx, filter
func (_m *ProductRepository) FindProduct(ctx context.Context, filter product.ListFilter) ([]product.Product, int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindProduct")
	}

	var r0 []product.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, product.ListFilter) ([]product.Product, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.ListFilter) []product.Product); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.ListFilter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, product.ListFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindProductByID provides a mock function with given fields: ctx, id
func (_m *ProductRepository) FindProductByID(ctx context.Context, id string) (*product.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByID")
	}

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*product.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *product.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductByNameAndType provides a mock function with given fields: ctx, name, ptype
func (_m *ProductRepository) FindProductByNameAndType(ctx context.Context, name string, ptype string) (*product.Product, error) {
	ret := _m.Called(ctx, name, ptype)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByNameAndType")
	}

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*product.Product, error)); ok {
		return rf(ctx, name, ptype)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *product.Product); ok {
		r0 = rf(ctx, name, ptype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, ptype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveProduct provides a mock function with given fields: ctx, p
func (_m *ProductRepository) SaveProduct(ctx context.Context, p *product.Product) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SaveProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.Product) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
