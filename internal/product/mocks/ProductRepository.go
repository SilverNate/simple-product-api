// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	product "simple-product-api/internal/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// FindProduct provides a mock function with given fields: ctx, filter
func (_m *ProductRepository) FindProduct(ctx context.Context, filter product.ListFilter) ([]product.Product, int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindProduct")
	}

	var r0 []product.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, product.ListFilter) ([]product.Product, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.ListFilter) []product.Product); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.ListFilter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, product.ListFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProductRepository_FindProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindProduct'
type ProductRepository_FindProduct_Call struct {
	*mock.Call
}

// FindProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - filter product.ListFilter
func (_e *ProductRepository_Expecter) FindProduct(ctx interface{}, filter interface{}) *ProductRepository_FindProduct_Call {
	return &ProductRepository_FindProduct_Call{Call: _e.mock.On("FindProduct", ctx, filter)}
}

func (_c *ProductRepository_FindProduct_Call) Run(run func(ctx context.Context, filter product.ListFilter)) *ProductRepository_FindProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(product.ListFilter))
	})
	return _c
}

func (_c *ProductRepository_FindProduct_Call) Return(_a0 []product.Product, _a1 int, _a2 error) *ProductRepository_FindProduct_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProductRepository_FindProduct_Call) RunAndReturn(run func(context.Context, product.ListFilter) ([]product.Product, int, error)) *ProductRepository_FindProduct_Call {
	_c.Call.Return(run)
	return _c
}

// FindProductByID provides a mock function with given fields: ctx, id
func (_m *ProductRepository) FindProductByID(ctx context.Context, id string) (*product.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByID")
	}

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*product.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *product.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_FindProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindProductByID'
type ProductRepository_FindProductByID_Call struct {
	*mock.Call
}

// FindProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProductRepository_Expecter) FindProductByID(ctx interface{}, id interface{}) *ProductRepository_FindProductByID_Call {
	return &ProductRepository_FindProductByID_Call{Call: _e.mock.On("FindProductByID", ctx, id)}
}

func (_c *ProductRepository_FindProductByID_Call) Run(run func(ctx context.Context, id string)) *ProductRepository_FindProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductRepository_FindProductByID_Call) Return(_a0 *product.Product, _a1 error) *ProductRepository_FindProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_FindProductByID_Call) RunAndReturn(run func(context.Context, string) (*product.Product, error)) *ProductRepository_FindProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindProductByNameAndType provides a mock function with given fields: ctx, name, ptype
func (_m *ProductRepository) FindProductByNameAndType(ctx context.Context, name string, ptype string) (*product.Product, error) {
	ret := _m.Called(ctx, name, ptype)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByNameAndType")
	}

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*product.Product, error)); ok {
		return rf(ctx, name, ptype)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *product.Product); ok {
		r0 = rf(ctx, name, ptype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, ptype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_FindProductByNameAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindProductByNameAndType'
type ProductRepository_FindProductByNameAndType_Call struct {
	*mock.Call
}

// FindProductByNameAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - ptype string
func (_e *ProductRepository_Expecter) FindProductByNameAndType(ctx interface{}, name interface{}, ptype interface{}) *ProductRepository_FindProductByNameAndType_Call {
	return &ProductRepository_FindProductByNameAndType_Call{Call: _e.mock.On("FindProductByNameAndType", ctx, name, ptype)}
}

func (_c *ProductRepository_FindProductByNameAndType_Call) Run(run func(ctx context.Context, name string, ptype string)) *ProductRepository_FindProductByNameAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProductRepository_FindProductByNameAndType_Call) Return(_a0 *product.Product, _a1 error) *ProductRepository_FindProductByNameAndType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_FindProductByNameAndType_Call) RunAndReturn(run func(context.Context, string, string) (*product.Product, error)) *ProductRepository_FindProductByNameAndType_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProduct provides a mock function with given fields: ctx, p
func (_m *ProductRepository) SaveProduct(ctx context.Context, p *product.Product) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SaveProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.Product) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_SaveProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProduct'
type ProductRepository_SaveProduct_Call struct {
	*mock.Call
}

// SaveProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - p *product.Product
func (_e *ProductRepository_Expecter) SaveProduct(ctx interface{}, p interface{}) *ProductRepository_SaveProduct_Call {
	return &ProductRepository_SaveProduct_Call{Call: _e.mock.On("SaveProduct", ctx, p)}
}

func (_c *ProductRepository_SaveProduct_Call) Run(run func(ctx context.Context, p *product.Product)) *ProductRepository_SaveProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*product.Product))
	})
	return _c
}

func (_c *ProductRepository_SaveProduct_Call) Return(_a0 error) *ProductRepository_SaveProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_SaveProduct_Call) RunAndReturn(run func(context.Context, *product.Product) error) *ProductRepository_SaveProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
